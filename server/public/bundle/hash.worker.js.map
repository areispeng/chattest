{"version":3,"sources":["webpack:///webpack/bootstrap eb03af2ec445c12aa155","webpack:///./app/util/recorderWorker.js"],"names":["recLength","recBuffers","sampleRate","numChannels","onmessage","e","data","command","init","config","record","buffer","exportWAV","type","getBuffer","clear","initBuffers","inputBuffer","channel","push","length","buffers","mergeBuffers","interleaved","interleave","dataview","encodeWAV","audioBlob","Blob","postMessage","result","Float32Array","offset","i","set","inputL","inputR","index","inputIndex","floatTo16BitPCM","output","input","s","Math","max","min","setInt16","writeString","view","string","setUint8","charCodeAt","samples","ArrayBuffer","DataView","setUint32","setUint16"],"mappings":"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","file":"hash.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundle/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap eb03af2ec445c12aa155","let recLength = 0,\n    recBuffers = [],\n    sampleRate,\n    numChannels;\n\nonmessage = function (e) {\n    switch (e.data.command) {\n        case 'init':\n            init(e.data.config);\n            break;\n        case 'record':\n            record(e.data.buffer);\n            break;\n        case 'exportWAV':\n            exportWAV(e.data.type);\n            break;\n        case 'getBuffer':\n            getBuffer();\n            break;\n        case 'clear':\n            clear();\n            break;\n    }\n};\n\nfunction init(config) {\n    sampleRate = config.sampleRate;\n    numChannels = config.numChannels;\n    initBuffers();\n}\n\nfunction record(inputBuffer) {\n    for (var channel = 0; channel < numChannels; channel++) {\n        recBuffers[channel].push(inputBuffer[channel]);\n    }\n    recLength += inputBuffer[0].length;\n}\n\nfunction exportWAV(type) {\n    let buffers = [];\n    for (let channel = 0; channel < numChannels; channel++) {\n        buffers.push(mergeBuffers(recBuffers[channel], recLength));\n    }\n    let interleaved;\n    if (numChannels === 2) {\n        interleaved = interleave(buffers[0], buffers[1]);\n    } else {\n        interleaved = buffers[0];\n    }\n    let dataview = encodeWAV(interleaved);\n    let audioBlob = new Blob([dataview], {type: type});\n\n    postMessage({command: 'exportWAV', data: audioBlob});\n}\n\nfunction getBuffer() {\n    let buffers = [];\n    for (let channel = 0; channel < numChannels; channel++) {\n        buffers.push(mergeBuffers(recBuffers[channel], recLength));\n    }\n    postMessage({command: 'getBuffer', data: buffers});\n}\n\nfunction clear() {\n    recLength = 0;\n    recBuffers = [];\n    initBuffers();\n}\n\nfunction initBuffers() {\n    for (let channel = 0; channel < numChannels; channel++) {\n        recBuffers[channel] = [];\n    }\n}\n\nfunction mergeBuffers(recBuffers, recLength) {\n    let result = new Float32Array(recLength);\n    let offset = 0;\n    for (let i = 0; i < recBuffers.length; i++) {\n        result.set(recBuffers[i], offset);\n        offset += recBuffers[i].length;\n    }\n    return result;\n}\n\nfunction interleave(inputL, inputR) {\n    let length = inputL.length + inputR.length;\n    let result = new Float32Array(length);\n\n    let index = 0,\n        inputIndex = 0;\n\n    while (index < length) {\n        result[index++] = inputL[inputIndex];\n        result[index++] = inputR[inputIndex];\n        inputIndex++;\n    }\n    return result;\n}\n\nfunction floatTo16BitPCM(output, offset, input) {\n    for (let i = 0; i < input.length; i++, offset += 2) {\n        let s = Math.max(-1, Math.min(1, input[i]));\n        output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n    }\n}\n\nfunction writeString(view, offset, string) {\n    for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\nfunction encodeWAV(samples) {\n    let buffer = new ArrayBuffer(44 + samples.length * 2);\n    let view = new DataView(buffer);\n\n    /* RIFF identifier */\n    writeString(view, 0, 'RIFF');\n    /* RIFF chunk length */\n    view.setUint32(4, 36 + samples.length * 2, true);\n    /* RIFF type */\n    writeString(view, 8, 'WAVE');\n    /* format chunk identifier */\n    writeString(view, 12, 'fmt ');\n    /* format chunk length */\n    view.setUint32(16, 16, true);\n    /* sample format (raw) */\n    view.setUint16(20, 1, true);\n    /* channel count */\n    view.setUint16(22, numChannels, true);\n    /* sample rate */\n    view.setUint32(24, sampleRate, true);\n    /* byte rate (sample rate * block align) */\n    view.setUint32(28, sampleRate * 4, true);\n    /* block align (channel count * bytes per sample) */\n    view.setUint16(32, numChannels * 2, true);\n    /* bits per sample */\n    view.setUint16(34, 16, true);\n    /* data chunk identifier */\n    writeString(view, 36, 'data');\n    /* data chunk length */\n    view.setUint32(40, samples.length * 2, true);\n\n    floatTo16BitPCM(view, 44, samples);\n\n    return view;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/util/recorderWorker.js"],"sourceRoot":""}